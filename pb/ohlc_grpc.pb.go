// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: ohlc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OHLC_Feed_FullMethodName            = "/OHLC/Feed"
	OHLC_GetStockList_FullMethodName    = "/OHLC/GetStockList"
	OHLC_GetStockSummary_FullMethodName = "/OHLC/GetStockSummary"
	OHLC_GetFeederStatus_FullMethodName = "/OHLC/GetFeederStatus"
)

// OHLCClient is the client API for OHLC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OHLCClient interface {
	Feed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error)
	GetStockList(ctx context.Context, in *GetStockListRequest, opts ...grpc.CallOption) (*GetStockListResponse, error)
	GetStockSummary(ctx context.Context, in *GetStockSummaryRequest, opts ...grpc.CallOption) (*GetStockSummaryResponse, error)
	GetFeederStatus(ctx context.Context, in *GetFeederStatusRequest, opts ...grpc.CallOption) (*GetFeederStatusResponse, error)
}

type oHLCClient struct {
	cc grpc.ClientConnInterface
}

func NewOHLCClient(cc grpc.ClientConnInterface) OHLCClient {
	return &oHLCClient{cc}
}

func (c *oHLCClient) Feed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, OHLC_Feed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCClient) GetStockList(ctx context.Context, in *GetStockListRequest, opts ...grpc.CallOption) (*GetStockListResponse, error) {
	out := new(GetStockListResponse)
	err := c.cc.Invoke(ctx, OHLC_GetStockList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCClient) GetStockSummary(ctx context.Context, in *GetStockSummaryRequest, opts ...grpc.CallOption) (*GetStockSummaryResponse, error) {
	out := new(GetStockSummaryResponse)
	err := c.cc.Invoke(ctx, OHLC_GetStockSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oHLCClient) GetFeederStatus(ctx context.Context, in *GetFeederStatusRequest, opts ...grpc.CallOption) (*GetFeederStatusResponse, error) {
	out := new(GetFeederStatusResponse)
	err := c.cc.Invoke(ctx, OHLC_GetFeederStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OHLCServer is the server API for OHLC service.
// All implementations must embed UnimplementedOHLCServer
// for forward compatibility
type OHLCServer interface {
	Feed(context.Context, *FeedRequest) (*FeedResponse, error)
	GetStockList(context.Context, *GetStockListRequest) (*GetStockListResponse, error)
	GetStockSummary(context.Context, *GetStockSummaryRequest) (*GetStockSummaryResponse, error)
	GetFeederStatus(context.Context, *GetFeederStatusRequest) (*GetFeederStatusResponse, error)
	mustEmbedUnimplementedOHLCServer()
}

// UnimplementedOHLCServer must be embedded to have forward compatible implementations.
type UnimplementedOHLCServer struct {
}

func (UnimplementedOHLCServer) Feed(context.Context, *FeedRequest) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Feed not implemented")
}
func (UnimplementedOHLCServer) GetStockList(context.Context, *GetStockListRequest) (*GetStockListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockList not implemented")
}
func (UnimplementedOHLCServer) GetStockSummary(context.Context, *GetStockSummaryRequest) (*GetStockSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockSummary not implemented")
}
func (UnimplementedOHLCServer) GetFeederStatus(context.Context, *GetFeederStatusRequest) (*GetFeederStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeederStatus not implemented")
}
func (UnimplementedOHLCServer) mustEmbedUnimplementedOHLCServer() {}

// UnsafeOHLCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OHLCServer will
// result in compilation errors.
type UnsafeOHLCServer interface {
	mustEmbedUnimplementedOHLCServer()
}

func RegisterOHLCServer(s grpc.ServiceRegistrar, srv OHLCServer) {
	s.RegisterService(&OHLC_ServiceDesc, srv)
}

func _OHLC_Feed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCServer).Feed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OHLC_Feed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCServer).Feed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLC_GetStockList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCServer).GetStockList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OHLC_GetStockList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCServer).GetStockList(ctx, req.(*GetStockListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLC_GetStockSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCServer).GetStockSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OHLC_GetStockSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCServer).GetStockSummary(ctx, req.(*GetStockSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OHLC_GetFeederStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeederStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OHLCServer).GetFeederStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OHLC_GetFeederStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OHLCServer).GetFeederStatus(ctx, req.(*GetFeederStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OHLC_ServiceDesc is the grpc.ServiceDesc for OHLC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OHLC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OHLC",
	HandlerType: (*OHLCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Feed",
			Handler:    _OHLC_Feed_Handler,
		},
		{
			MethodName: "GetStockList",
			Handler:    _OHLC_GetStockList_Handler,
		},
		{
			MethodName: "GetStockSummary",
			Handler:    _OHLC_GetStockSummary_Handler,
		},
		{
			MethodName: "GetFeederStatus",
			Handler:    _OHLC_GetFeederStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ohlc.proto",
}
