// Code generated by mockery v2.33.3. DO NOT EDIT.

package mocks

import (
	context "context"
	ohlc "stock/ohlc"

	mock "github.com/stretchr/testify/mock"
)

// OHLCRepository is an autogenerated mock type for the OHLCRepository type
type OHLCRepository struct {
	mock.Mock
}

// FlushStockList provides a mock function with given fields: ctx
func (_m *OHLCRepository) FlushStockList(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFeederStatus provides a mock function with given fields: ctx
func (_m *OHLCRepository) GetFeederStatus(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStockList provides a mock function with given fields: ctx
func (_m *OHLCRepository) GetStockList(ctx context.Context) ([]*ohlc.StockItem, error) {
	ret := _m.Called(ctx)

	var r0 []*ohlc.StockItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ohlc.StockItem, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ohlc.StockItem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ohlc.StockItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStockSummary provides a mock function with given fields: ctx, stock, dayDate
func (_m *OHLCRepository) GetStockSummary(ctx context.Context, stock string, dayDate string) (*ohlc.StockSummary, error) {
	ret := _m.Called(ctx, stock, dayDate)

	var r0 *ohlc.StockSummary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*ohlc.StockSummary, error)); ok {
		return rf(ctx, stock, dayDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ohlc.StockSummary); ok {
		r0 = rf(ctx, stock, dayDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ohlc.StockSummary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, stock, dayDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetFeederStatus provides a mock function with given fields: ctx, status
func (_m *OHLCRepository) SetFeederStatus(ctx context.Context, status string) error {
	ret := _m.Called(ctx, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetStockSummary provides a mock function with given fields: ctx, stock, dayDate, stockSummary
func (_m *OHLCRepository) SetStockSummary(ctx context.Context, stock string, dayDate string, stockSummary *ohlc.StockSummary) error {
	ret := _m.Called(ctx, stock, dayDate, stockSummary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *ohlc.StockSummary) error); ok {
		r0 = rf(ctx, stock, dayDate, stockSummary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOHLCRepository creates a new instance of OHLCRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOHLCRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OHLCRepository {
	mock := &OHLCRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
